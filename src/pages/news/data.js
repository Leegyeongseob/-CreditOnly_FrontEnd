// data.js
export const items = [
  {
    id: 1,
    title: "리액트 기초: 초보자를 위한 가이드",
    author: "홍길동",
    content: "리액트의 기초를 배우는 데 필요한 모든 정보를 담은 초보자 가이드입니다. 컴포넌트 기반의 UI 구축 방법을 이해하고, JSX 문법과 기본적인 상태 관리 기법을 익혀보세요."
  },
  {
    id: 2,
    title: "리액트 고급 주제: 성능 최적화와 패턴",
    author: "김철수",
    content: "리액트 애플리케이션의 성능을 최적화하는 방법과 다양한 디자인 패턴에 대해 알아보세요. 이 기사에서는 렌더링 최적화, 메모이제이션 기법, 그리고 재사용 가능한 컴포넌트 패턴을 설명합니다."
  },
  {
    id: 3,
    title: "리액트 훅스: 함수형 컴포넌트의 힘",
    author: "이영희",
    content: "리액트 훅스를 사용하여 함수형 컴포넌트에서 상태 관리와 부수 효과를 처리하는 방법을 배워보세요. useState, useEffect, useContext 등 주요 훅스를 다룹니다."
  },
  {
    id: 4,
    title: "리액트 라우터: SPA의 네비게이션 구현",
    author: "박준형",
    content: "리액트 라우터를 사용하여 싱글 페이지 애플리케이션에서 페이지 간 네비게이션을 구현하는 방법을 알아보세요. 동적 라우팅, 중첩 라우트, 그리고 라우트 보호 기능을 포함합니다."
  },
  {
    id: 5,
    title: "리액트 상태 관리: 상태를 효과적으로 관리하는 법",
    author: "최민수",
    content: "리액트 애플리케이션에서 상태를 효과적으로 관리하는 다양한 방법에 대해 알아보세요. 컨텍스트 API, 리덕스, 그리고 상태 관리 라이브러리를 활용한 접근 방법을 소개합니다."
  },
  {
    id: 6,
    title: "리액트 컨텍스트 API: 글로벌 상태 관리",
    author: "정수연",
    content: "리액트의 컨텍스트 API를 사용하여 글로벌 상태를 관리하는 방법을 배워보세요. 컴포넌트 트리 전체에서 상태를 공유하고 관리할 수 있는 방법을 설명합니다."
  },
  {
    id: 7,
    title: "리액트와 리덕스: 상태 관리를 한 단계 더",
    author: "문상철",
    content: "리액트와 리덕스를 통합하여 복잡한 상태 관리를 효율적으로 처리하는 방법을 알아보세요. 리덕스의 기본 개념과 미들웨어를 활용한 상태 관리 기법을 설명합니다."
  },
  {
    id: 8,
    title: "리액트 성능 최적화: 애플리케이션을 빠르게",
    author: "이수진",
    content: "리액트 애플리케이션의 성능을 개선하는 다양한 방법을 배우세요. 불필요한 렌더링을 줄이고, 성능 분석 도구를 사용하여 애플리케이션의 병목 현상을 찾아보세요."
  },
  {
    id: 9,
    title: "리액트 테스트: 안정성을 보장하는 방법",
    author: "오민수",
    content: "리액트 애플리케이션의 테스트 방법과 도구를 알아보세요. 단위 테스트, 통합 테스트, 그리고 end-to-end 테스트를 포함하여 애플리케이션의 안정성을 보장할 수 있는 방법을 설명합니다."
  },
  {
    id: 10,
    title: "리액트 네이티브: 모바일 앱 개발의 시작",
    author: "조지훈",
    content: "리액트 네이티브를 사용하여 모바일 애플리케이션을 개발하는 방법을 배워보세요. iOS와 안드로이드 플랫폼에서 작동하는 크로스 플랫폼 앱을 만드는 방법을 설명합니다."
  },
  {
    id: 11,
    title: "리액트 네이티브 내비게이션: 앱 내비게이션 구현하기",
    author: "배지연",
    content: "리액트 네이티브에서 내비게이션 기능을 구현하는 방법을 알아보세요. Stack Navigator, Tab Navigator, 그리고 Drawer Navigator를 활용하여 앱의 내비게이션을 효율적으로 관리할 수 있습니다."
  },
  {
    id: 12,
    title: "리액트와 타입스크립트: 타입 안전성 강화하기",
    author: "홍세미",
    content: "타입스크립트를 리액트와 함께 사용하여 타입 안전성을 강화하는 방법을 배우세요. 타입 선언, 제너릭, 그리고 타입 추론을 활용하여 리액트 애플리케이션을 더욱 견고하게 만들 수 있습니다."
  },
  {
    id: 13,
    title: "리액트 디자인 패턴: 모범 사례 및 패턴",
    author: "정재훈",
    content: "리액트 애플리케이션에서 사용할 수 있는 다양한 디자인 패턴을 탐구하세요. 컴포넌트 설계 패턴, 상태 관리 패턴, 그리고 고급 기술들을 포함한 모범 사례를 설명합니다."
  },
  {
    id: 14,
    title: "리액트 서스펜스: 비동기 데이터 처리하기",
    author: "이상미",
    content: "리액트 서스펜스를 사용하여 비동기 데이터 로딩을 간편하게 처리하는 방법을 배우세요. 컴포넌트가 데이터를 로딩하는 동안 사용자에게 로딩 상태를 보여주는 방법을 설명합니다."
  },
  // { id: 15, title: "서버 사이드 렌더링: SSR로 SEO 개선하기", author: "오스카", content: "서버 사이드 렌더링을 통해 리액트 애플리케이션의 SEO를 개선하고 초기 로딩 성능을 향상시키는 방법을 알아보세요." },
];
